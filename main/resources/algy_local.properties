##create scripts for initializing algernon##
##algernon moncrief##

trigger_synched_tables_after_insert_add_history = CREATE TRIGGER `synched_tables_after_insert_add_history` AFTER INSERT ON `synched_tables` FOR EACH ROW BEGIN INSERT INTO synch_history (table_id,scrub_date) VALUES (NEW.table_id, '2013-08-05 18:19:03'); END

trigger_key_after_key_add_map_to_synched_tables = CREATE TRIGGER `key_after_key_add_map_to_synched_tables` AFTER INSERT ON `keys` FOR EACH ROW BEGIN IF (new.report_name LIKE '%_key_puller_key') THEN UPDATE synched_tables SET pks_pull_key = new.key_id WHERE synched_tables.table_id = new.table_id; ELSEIF (new.report_name LIKE '%_table_puller') THEN UPDATE synched_tables SET table_pull_key = new.key_id WHERE synched_tables.table_id = new.table_id; END IF; END

sniffer_get_oldest_table = SELECT table_name, is_change_tracked FROM (SELECT synched_tables.table_name,MAX(synch_history.start_time) AS start_time,synched_tables.is_change_tracked FROM @dbName.synch_history INNER JOIN @dbName.synched_tables ON synch_history.table_id = synched_tables.table_id WHERE synched_tables.is_synched = 1 GROUP BY table_name, is_change_tracked)query1 ORDER BY start_time ASC LIMIT 1;

sniffer_start_update_entry = INSERT INTO @dbName.synch_history (table_id, start_time) VALUES (?,?);

sniffer_finish_update_entry = UPDATE @dbName.synch_history SET end_time = ? WHERE table_id = ? ORDER BY scrub_date DESC LIMIT 1;

sniffer_get_table_id = SELECT table_id FROM @dbName.synched_tables WHERE table_name = ?;

sniffer_check_table = SELECT * FROM information_schema.tables WHERE tables.table_name LIKE ? AND tables.table_schema LIKE '@dbName';

sniffer_check_database = SHOW DATABASES LIKE '@dbName';

sniffer_check_trigger = SELECT * FROM information_schema.triggers WHERE triggers.trigger_name = ? AND triggers.trigger_schema LIKE '@dbName';

sniffer_check_fk = SELECT * FROM information_schema.table_constraints WHERE CONSTRAINT_NAME = ? AND CONSTRAINT_TYPE = 'FOREIGN KEY' AND TABLE_SCHEMA = '@dbName';

sniffer_check_key = SELECT * FROM algernon_cloud.keys WHERE key_name = ?;

sniffer_get_key_by_id = SELECT key_value_encrypted, salt FROM algernon_cloud.`keys` WHERE key_id = ?;

sniffer_get_key_by_name = SELECT key_value_encrypted, salt FROM algernon_cloud.`keys` WHERE key_name = ?;

sniffer_pull_pks = SELECT column_name FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE table_schema = '@dbName' AND table_name = ? AND CONSTRAINT_NAME = 'PRIMARY';

database_replication_database = CREATE DATABASE @dbName;

table_synched_tables = CREATE TABLE `synched_tables` (`table_id` INT(11) NOT NULL AUTO_INCREMENT, `table_name` VARCHAR(200) NOT NULL DEFAULT '0', `is_change_tracked` TINYINT(4) NOT NULL DEFAULT '0', `is_synched` TINYINT(4) NOT NULL DEFAULT '0', `primed_date` DATE NULL DEFAULT NULL, `table_pull_key` INT(11) NULL DEFAULT NULL, `pks_pull_key` INT(11) NULL DEFAULT NULL, PRIMARY KEY (`table_id`),INDEX `FK_synched_tables_keys` (`table_pull_key`), INDEX `FK_synched_tables_keys_2` (`pks_pull_key`)) COLLATE='latin1_swedish_ci' ENGINE=InnoDB;

table_synch_history = CREATE TABLE `synch_history` (`scrub_id` INT(11) NOT NULL AUTO_INCREMENT, `table_id` INT(11) NOT NULL, `scrub_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, `start_time` DATETIME NULL DEFAULT NULL, `end_time` DATETIME NULL DEFAULT NULL, PRIMARY KEY (`scrub_id`), INDEX `FK_synchtables_tableid` (`table_id`)) COLLATE='latin1_swedish_ci' ENGINE=InnoDB;

table_keys = CREATE TABLE `keys` (`key_id` INT(11) NOT NULL AUTO_INCREMENT, `credible_id` INT(11) NULL DEFAULT NULL, `table_id` INT(11) NULL DEFAULT NULL, `key_name` VARCHAR(100) NULL DEFAULT NULL, `report_name` VARCHAR(100) NULL DEFAULT NULL, `key_desc` VARCHAR(200) NULL DEFAULT NULL, `key_value_encrypted` VARCHAR(200) NULL DEFAULT NULL, `salt` VARCHAR(45) NULL DEFAULT NULL, `key_value_decrypted` VARCHAR(200) NULL DEFAULT NULL, PRIMARY KEY (`key_id`), UNIQUE INDEX `keys_key_name_uindex` (`key_name`), UNIQUE INDEX `keys_credible_id_uindex` (`credible_id`), INDEX `FK_keys_synched_tables` (`table_id`)) COLLATE='latin1_swedish_ci' ENGINE=InnoDB;

sniffer_add_local_key = INSERT INTO @dbName.keys (key_name, report_name, key_value_encrypted, salt) VALUES (?,?,?,?);

sniffer_add_remote_key = INSERT INTO @dbName.keys (table_id, key_name, report_name, key_value_encrypted, salt) VALUES (?,?,?,?,?);

sniffer_pull_replicated_tables = SELECT TABLE_NAME FROM @dbName.synched_tables;

sniffer_pull_synched_tables = SELECT TABLE_NAME FROM @dbName.synched_tables WHERE synched_tables.is_synched = 1;

sniffer_pull_unkeyed_synched_tables = SELECT table_id, table_name, is_change_tracked FROM @dbName.synched_tables WHERE is_synched = 1 AND (table_pull_key IS NULL OR pks_pull_key IS NULL);

sniffer_log_new_synched_table = INSERT INTO synched_tables (table_name,is_change_tracked,is_synched,primed_date) VALUES (?,?,?,NULL);

FKS_FK_synched_tables_keys = ALTER TABLE @dbName.synched_tables ADD CONSTRAINT `FK_synched_tables_keys` FOREIGN KEY (`table_pull_key`) REFERENCES `keys` (`key_id`);

FKS_FK_synched_tables_keys_2 = ALTER TABLE @dbName.synched_tables ADD CONSTRAINT `FK_synched_tables_keys_2` FOREIGN KEY (`pks_pull_key`) REFERENCES `keys` (`key_id`);

FKS_FK_synchtables_tableid = ALTER TABLE @dbName.synch_history ADD CONSTRAINT `FK_synchtables_tableid` FOREIGN KEY (`table_id`) REFERENCES `synched_tables` (`table_id`);

FKS_FK_keys_synched_tables = ALTER TABLE @dbName.`keys` ADD CONSTRAINT `FK_keys_synched_tables` FOREIGN KEY (`table_id`) REFERENCES `synched_tables` (`table_id`);

sniffer_dump_local_table = SELECT * FROM @dbName.&tableName;

sniffer_dump_local_tracked_table = SELECT * FROM @dbName.&tableName WHERE ? IN (?);

sniffer_last_update_date = SELECT query1.update_date FROM synched_tables INNER JOIN(SELECT synch_history.table_id, IfNull(MAX(synch_history.end_time),'2012-01-01 01:01:01') AS update_date FROM @dbName.synch_history GROUP BY table_id)query1 on query1.table_id = synched_tables.table_id WHERE synched_tables.table_name = ? ORDER BY query1.update_date ASC LIMIT 1;

sniffer_table_header = SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.`COLUMNS` WHERE TABLE_SCHEMA = '@dbName' AND TABLE_NAME = ?;

sniffer_is_change_tracked = SELECT is_change_tracked FROM @dbName.synched_tables WHERE table_name = ?;

sniffer_get_oldest_client = SELECT query1.client_id FROM (SELECT eligibility_scrub_history.client_id, MAX(eligibility_scrub_history.scrub_date) AS date_last_scrubbed FROM @dbName2.eligibility_scrub_history GROUP BY eligibility_scrub_history.client_id)query1 INNER JOIN @dbName.Clients On Clients.client_id = query1.client_id Where Clients.client_status NOT IN ('closed') And Clients.text30 IS NOT NULL ORDER BY query1.date_last_scrubbed ASC LIMIT 1;

sniffer_get_oldest_client_batch = SELECT query1.client_id FROM (SELECT eligibility_scrub_history.client_id, MAX(eligibility_scrub_history.scrub_date) AS date_last_scrubbed FROM @dbName2.eligibility_scrub_history GROUP BY eligibility_scrub_history.client_id)query1 INNER JOIN @dbName.Clients On Clients.client_id = query1.client_id Where Clients.client_status NOT IN ('closed') And Clients.text30 IS NOT NULL ORDER BY query1.date_last_scrubbed ASC LIMIT 500;

sniffer_get_all_eligibility_clients = SELECT Clients.client_id, Clients.text30 FROM @dbName.Clients INNER JOIN (SELECT MAX(ScrubHistory.scrub_id) AS scrub_id, ScrubHistory.client_id FROM @dbName.ScrubHistory GROUP BY client_id)query1 on Clients.client_id = query1.client_id WHERE client_status NOT LIKE 'closed' AND text30 IS NOT NULL ORDER BY query1.scrub_id ASC;

sniffer_build_temporary_table = CREATE TABLE @dbName.&tableName1 LIKE @dbName.&tableName2;

sniffer_drop_temporary_table = DROP TABLE @dbName.&tableName;

sniffer_add_scrub_entry = UPDATE @dbName.ScrubHistory SET scrubbed_html = ?, end_time = ? WHERE client_id = ? ORDER BY scrub_id DESC LIMIT 1;

sniffer_finish_synch_history = UPDATE synch_history SET end_time = ? WHERE table_id = ? ORDER BY scrub_date DESC LIMIT 1;